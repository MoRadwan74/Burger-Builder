- This will contain all the important points about this project with a structured hierarchy.

- You can see the planning of this project in the image "Burger Builder.png"

===============================================================================================================
>> 1- The Layout:
=================
- Keep in mind, we're building the burger builder application so the goal is that users can use it to add ingredients and therefore build a burger.

- If you think about UI, We should have a header as a navigation-bar where on right, we can go to all the previous orders or build the burger itself with some logo or text on the left.

- Then we have the burger design as we want, to be constructed ingredient by ingredient. In order to have ingredients, we need some controls below the burger to add or remove a layer, like below:

Meat    + More | - Less
Bacon   + More | - Less
Salad   + More | - Less
Cheese  + More | - Less

- We also need to see the price of the constructed burger, while adding the ingredients accordingly and a button for Checkout to buy our burger.

===============================================================================================================
>> 2- The Component Tree:   <<< You can see the image of the tree in the project >>>
========================
- We have our "App" component, in which we define a base "Layout" component for this application which is already defined above before.

- The "Layout" component has a couple of components nested besides it, some component responsive for navigation and for the content, so the navigation on the other hand might be split up in a "Toolbar" and a "Side-Drawer" because we want to create a responsive application so we have to cater for both mobile devices and desktop devices.

- Below the "Layout" we have four different components:
1- "Toolbar" which is always displayed and the items we display on it varies by the viewport.
2- "Side-Drawer" this is simply the side menu we can bring in when we're on the mobile device.
3- "Backdrop" For the sideDrawer, we might need it if we want to show a modal for the check out.
4- "{props.children}" We want to have something which we can dynamically wrap, so whichever page you want to display (Burger builder, previous orders, checkout page etc...). Later in the app, we're going to add routing so that we can navigate to different pages

- "{props.children}" will contain different pages but essentially, we will have "Burger Builder" component which will nest three components.

- The "Burger Builder" will have:
1- "Build Controls" with all these ingredient buttons with More and Less to add like we showed above.
2- "Burger" Which will be giving us the preview of the burger and should hold a couple of ingredient components which the user dynamically manages it with the "Build Controls". 
3- "Modal" which gives us check out preview, so where we basically see a summary and could proceed to check out. That will wrap the props.children in a manner around any content we want to render in a modal.

<<< NOTE >>> There are multiple components that will be added while developing but the above are ones to start with.

===============================================================================================================
>> 3- Planning the state:
=========================
A- We need to manage the ingredients of the burger that the user will add. It will contain of course the ingredients we will use with a counter of it.

B- We also want to know if the user is currently checking out the burger, if you clicked on purchased or not.

C- We need to always see the price and dynamically calculate and output it.

>> Like so, 
state = {
    ingredients:[meat: 1, bacon: 2 ...],
    purchased: true,
    totalPrice: 15.00 // For example
}

- Now the question is, Where do we manage the state? We shouldn't use it in the "App" like usual but instead we use it in "Burger Builder" because the state we defined above is really related to this component.

<<< NOTE >>> Always, set the state in the component at which it will be used only.

===============================================================================================================
>> 4- Start doing the project:
==============================
- As usual, we will create a new project with "npx create-react-app" command. And do the usual cleanup removing the unecessary files from the project.

- We create the Layout component. We can use the App as our layout component but it's better to make focused components as each one to its functionality.

- But first let's create some folders inside "src" directory. components and containers
1- components will contain functional components that don't manage the state.
2- containers will contain stateful components that can be class-based or functional components.

- Inside the components folder, we create "Layout" folder that will contain "Layout.js" and its CSS file if needed. In "Layout" we need two areas or divs, One for "Toolbar, SideDrawer, Backdrop" so we in the future we need to repace this div with these three components. The second will be the "main" element provided by HTML and there we want to output the component we wrap with this layout. So we use {props.children}.

- We will not use the div as our root element in this component, we will use the hoc (Higher Order Component), Auxilliary. So let's create a folder for it in "src" folder as "hoc". Then create the Aux.js component which will just return props.children like below,

>> The code of "Auxilliary.js" component:
=========================================
const auxilliary = (props) => props.children;

export default auxilliary;
*****************************************End of the Code*******************************************************

- Then we import it in "Layout" and wrap the elements with it.

<<< NOTE >>> We can wrap the elements with div element as usual. (The used method is just an elegant way)

>> The code of "Layout.js" component:
==================================
import React from 'react';
import Aux from '../../hoc/Auxilliary';

const layout = (props) => (
    <Aux>
        <div>Toolbar, SideDrawer, Backdrop</div>
        <main>
            {props.children}
        </main>
    </Aux>
);

export default layout;
*****************************************End of the Code*******************************************************

- Now we can use the "Layout" component in "App.js" by importing and using it.

>> The code of "App.js" component:
=================================
import React, {Component} from 'react';
import Layout from './components/Layout/Layout';

class App extends Component{
  render(){
    return(
      <div>
        <Layout>

        </Layout>
      </div>
    );
  }
}

export default App;
*****************************************End of the Code*******************************************************

- Now we will not implement the navbar or toolbar, instead we focus on the core functionality of our app, The burger builder.

- We already said that the state will be managed in "Burger Builder" component so inside containers folder, we create a folder named "BurgerBuilder" at which we create the "BurgerBuilder.js" file.

- Inside the return statement in the render function, don't forget to wrap your JSX elements with Auxilliary component.

- We need to return two adjacent components, The first one is "Burger" which will be graphical representation of the burger with all the chosen ingredients. The second one is "Build Controls" that will be an area to add or remove ingredients to the burger.

>> The code in "BurgerBuilder" component:
========================================
import React, {Component} from 'react';

class BurgerBuilder extends Component{
    render(){
        <Aux>
            <div>Burger</div>
            <div>Build Controls</div>
        </Aux>
    }
}

export default BurgerBuilder;
*****************************************End of the Code*******************************************************

- Let's now add it to "App.js"

>> The code in "App" component:
===============================
import React, {Component} from 'react';
import Layout from './components/Layout/Layout';
import BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';

class App extends Component{
  render(){
    return(
      <div>
        <Layout>
          <BurgerBuilder/>
        </Layout>
      </div>
    );
  }
}

export default App;
*****************************************End of the Code*******************************************************

- Now we just add some CSS for the "Layout" adding some margin at the top. In Layout folder, create a CSS file named "Layout.module.css" and we must write the "module" word to include CSS Modules. Then create a class named "Content" that will be used in "Layout.js" file.
>> The code in "Layout.module.css":
===================================
.Content{
    margin-top: 16px;
}

>> The code in "Layout" component:
==================================
import React from 'react';
import Aux from '../../hoc/Auxilliary';
import classes from './Layout.module.css';
const layout = (props) => (
    <Aux>
        <div>Toolbar, SideDrawer, Backdrop</div>
        <main className={classes.Content}>
            {props.children}
        </main>
    </Aux>
);

export default layout;
*****************************************End of the Code*******************************************************

- Now let's implement the "Burger" component with its ingredients. Inside components folder, we create a folder called "Burger" that will include the "Burger" component. 

- But the burger will not be enough we need to include the ingredients of it. So inside the newly created "Burger" folder, we create another folder that's called "BurgerIngredient" which will contain the "BurgerIngredient" component.

- Also note that Maximillian made a CSS file for "BurgerIngredient" component that contains the graphical representation of the burger with its ingredients using CSS Modules. So you can find it as "BurgerIngredient.module.css"

- Now we need to add some logic to render a specifc JSX code for a specifc ingredient based on some input information via props.

- Let's create a variable called "ingredient" that will contain the chosen (Will-Be-Rendered) JSX code and set it initially to null.

- Then using switch statement, we set the variable "ingredient" for each case. Also, make sure to add "props.type" as an input to the switch statement to classify the cases based on the different ingredients like Cheese, meat, bacon etc...

- Don't forget to import the "BurgerIngredient.module.css" file with its class defined in the import statement like that:
>> import classes from './BurgerIngredient.module.css';

- Then inside each JSX div, assign the corresponding class with the naming defined in "BurgerIngredient.module.css" file.

>> The code in "BurgerIngredient" component:
============================================
import React from 'react';
import classes from './BurgerIngredient.module.css';

const burgerIngredient = (props) =>{
    let ingredient = null;

    switch(this.props.type){
            case('bread-bottom'):
                ingredient = <div className={classes.BreadBottom}></div>;
                break;
            case('bread-top'):
                ingredient =(
                    <div className={classes.BreadTop}>
                        <div className={classes.Seeds1}></div>
                        <div className={classes.Seeds2}></div>
                    </div>
                );
                break;
            case('meat'):
                ingredient = <div className={classes.Meat}></div>;
                break;
            case('cheese'):
                ingredient = <div className={classes.Cheese}></div>;
                break;
            case('salad'):
                ingredient = <div className={classes.Salad}></div>;
                break;
            case('bacon'):
                ingredient = <div className={classes.Bacon}></div>;
                break;
            default:
                ingredient = null;
        }

    return ingredient;
};

BurgerIngredient.prop-type = {
    type: PropType.string.isRequired
};

export default burgerIngredient;
*****************************************End of the Code*******************************************************
- At last, we can add a prop-type validation to make sure that we do recieve a type property. We need to install the package first.
>> npm install --save prop-types

- For no reasons, let's convert this component to class-based one and import prop-types in it also. We need to make sure that the type is string and we can chain another condition that it's required so whenever we try to use the ingredient component without passing a type, we will get an error.

>> The code in "BurgerIngredient" component:
============================================
import React, {Component} from 'react';
import classes from './BurgerIngredient.module.css';
import PropTypes from 'prop-types';

class BurgerIngredient extends Component {
    render(){
        let ingredient = null;

        switch(this.props.type){
            case('bread-bottom'):
                ingredient = <div className={classes.BreadBottom}></div>;
                break;
            case('bread-top'):
                ingredient =(
                    <div className={classes.BreadTop}>
                        <div className={classes.Seeds1}></div>
                        <div className={classes.Seeds2}></div>
                    </div>
                );
                break;
            case('meat'):
                ingredient = <div className={classes.Meat}></div>;
                break;
            case('cheese'):
                ingredient = <div className={classes.Cheese}></div>;
                break;
            case('salad'):
                ingredient = <div className={classes.Salad}></div>;
                break;
            case('bacon'):
                ingredient = <div className={classes.Bacon}></div>;
                break;
            default:
                ingredient = null;
        }

    return ingredient;
    }
}

BurgerIngredient.propTypes = {
    type: PropTypes.string.isRequired
};

export default BurgerIngredient;
*****************************************End of the Code*******************************************************

- Now after dealing with the burger ingredients, we shall start building our "Burger" component.
